.. Python-based use of parametric regression

Parametric regression tutorial
==============================

Introduction
------------

Given a set of observations :math:`(x_i, y_i)`, with :math:`\newcommand{\R}{\mathbb{R}}x_i = (x_{i1},
\ldots, x_{ip})^T \in \R^p`. We assume, there exists a function
:math:`f(\theta, x)` and a set of parameters :math:`\theta \in \R^q`
such that:

.. math::

  \DeclareMathOperator{\argmin}{argmin}
  y_i = f(\theta, x_i) + \epsilon_i

with :math:`\epsilon_i \in \R` such that :math:`E(\epsilon) = 0`.

The objective is to fine the set of parameters `\theta`. Obviously, the real
function is inaccesible. Instead, we will try to find an estimate of the
parameters, :math:`\hat{\theta}` using the least square estimator, which is:

.. math::

  \hat{\theta} = \argmin_{\theta \in \R^q} \left( f(\theta,x_i) - y_i \right)^2

A simple example
----------------

As a simple example, we will take the function :math:`f` to be:

.. math::

  f((a_0,a_1,a_2),x) = a_0 + a_1 x + a_2 x^2

Let's assume the points look like this:

.. image:: Parm_tut_data.png

The data points have been generated by that script::

  >>> import numpy as np
  >>> from matplotlib import pylab
  >>> x = np.arange(0,3,0.01)
  >>> y = 2*x + 4*x**2 + np.random.randn(*x.shape)
  >>> pylab.plot(x,y,'+',label='data')
  >>> pylab.legend(loc=0)
  >>> pylab.xlabel('X'); pylab.ylabel('Y')

So we will expect to find something close to :math:`(0,2,4)`.

To perform the analysis, we first need to define the function to be fitted::

  >>> def f((a0,a1,a2), x):
  >>>   return a0 + a1*x+ a2*x**2

Then, we construct a `CurveFitting` object, which computes and stores the
optimal parameters, and also behaves as a function for the fitted data::

  >>> import pyqt_fit
  >>> fit = pyqt_fit.CurveFitting(x,y,(0,1,0),f)
  >>> print "The parameters are: a0 = {0}, a1 = {1}, a2 = {2}".format(*fit.popt)
  The parameters are: a0 = -0.181581108848, a1 = 2.21486197906, a2 = 3.97872283269
  >>> yfitted = fit(x)

PyQt-Fit also has tools to evaluate your fitting. You can use them as a whole::

  >>> result= pyqt_fit.fit_evaluation(fit, x, y,
  ...                                 fct_desc = "$y = a_0 + a_1 x + a_2 x^2$",
  ...                                 param_names=['a_0', 'a_1', 'a_2'])

At last, you can use the display used for the GUI::

  >>> pyqt_fit.plot1d(result)

What you will obtain are these two graphs:

.. image:: Parm_tut_est_function.png
.. image:: Parm_tut_residuals.png

Confidence Intervals
--------------------

Defining the functions and residuals
------------------------------------

Using the functions/residuals defined for the GUI
-------------------------------------------------

Tuning the residuals
--------------------

